#+TITLE: Lars' Emacs Configuration
* Emacs Configuration
** Sane defaults
#+BEGIN_SRC emacs-lisp
(auto-compression-mode t)    ; Auto-open compressed
(global-font-lock-mode t)    ; Colourize text
(transient-mark-mode 1)      ; Highlight selection
(defalias 'yes-or-no-p 'y-or-n-p) ; Allow me to answer with 'y' or 'n' keys
(prefer-coding-system 'utf-8) ; Give me UTF-8
(set-language-environment "UTF-8")
(setq inhibit-read-only t)   ; Never open files in read-only mode
(setq mouse-wheel-progressive-speed 'nil) ; Disable scroll acceleration
#+END_SRC
** Personal preferences
#+BEGIN_SRC emacs-lisp
(setq shift-select-mode nil) ; Disable shift-select
(setq make-backup-files nil) ; Disable backup files
(setq vc-cvs-stay-local nil) ; Disable VCS backup files
(global-auto-revert-mode 1)  ; Auto-revert if change on disk
(setq revert-without-query ".*") ; Revert all unedited files
(global-subword-mode 1)      ; Navigate PascalCasedWords
(setq-default indent-tabs-mode nil) ; never use tabs for indent
#+END_SRC
Keep customizations elsewhere
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+END_SRC
** Shortcuts
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cs" 'shell)
(global-set-key "\C-j" 'newline-and-indent)
#+END_SRC
** Server
#+BEGIN_SRC emacs-lisp
(require 'server)
(if (equal window-system 'w32) (defun server-ensure-safe-dir (dir) "Noop" t))
(server-start)
#+END_SRC
** Add personal packages to ~load-path~
#+BEGIN_SRC emacs-lisp
(setq site-lisp-dir
      (expand-file-name "site-lisp" user-emacs-directory))
(add-to-list 'load-path site-lisp-dir)
#+END_SRC
** Install my packages
Use MELPA
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
#+END_SRC
Automatically install my packages
#+BEGIN_SRC emacs-lisp
(setq larsch/package-contents-fresh nil)
(defun package-install-fresh (package)
  (unless larsch/package-contents-fresh
    (package-refresh-contents)
    (setq larsch/package-contents-fresh t))
  (package-install package))
(defun packages-install (packages)
  (mapcar #'package-install-fresh
          (cl-remove-if #'package-installed-p packages))
  (delete-other-windows))
(packages-install
 '(editorconfig
   jade-mode
   js2-mode
   json-mode
   pcre2el
   powerline
   visual-regexp
   visual-regexp-steroids
   whitespace-cleanup-mode
   yaml-mode
   rg
   iedit))
#+END_SRC
** Appearance
*** Basic appearance
#+BEGIN_SRC emacs-lisp
(show-paren-mode t)          ; Highlight matching parens
(set 'show-paren-delay 0.05) ; Reduce the delay for showing matching parens
(line-number-mode t)         ; Show line number
(column-number-mode 1)       ; Show column number
(global-linum-mode 1)        ; Show line numbers
(blink-cursor-mode 0)        ; Stop cursor blinking
(setq frame-title-format "%b - Emacs")	; Show filename first in title bar
(setq split-width-threshold 'nil)       ; Sensible split-window-sensible
(if window-system (powerline-center-theme)) ; Improved mode line
#+END_SRC
*** Inhibit noise (splash screen, messages)
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq inhibit-startup-echo-area-message t)
#+END_SRC
*** Turn off all bars (menu, tool, scroll)
#+BEGIN_SRC emacs-lisp
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC
*** Fonts
Automatically pick the preferred font if available (cross-platform)
#+BEGIN_SRC emacs-lisp
  ;; (setq preferred-fonts
  ;;       '("Monaco-11:dpi=96"
  ;;         "Consolas-13:dpi=96"
  ;;         "Inconsolata-12"))
  ;; (defun font-exists-p (font) "Check if font exists" (if (null (x-list-fonts font)) nil t))
  ;; (defun pick-a-font (list) (cl-find-if 'font-exists-p list))
  ;; (defun preferred-font () "Get the preferred font" (pick-a-font preferred-fonts))
  ;; (add-to-list 'default-frame-alist (append '(font) (preferred-font)))
  ;; (set-face-attribute 'default t :font (preferred-font))
#+END_SRC
** Behaviour
*** move-lines
#+BEGIN_SRC emacs-lisp
(require 'move-lines)
(global-set-key [M-up] 'move-lines-up)
(global-set-key [M-down] 'move-lines-down)
#+END_SRC
*** iedit-mode
Interactive edit all occurences of symbols (C-;)
#+BEGIN_SRC emacs-lisp
(require 'iedit)
#+END_SRC
*** dabbrev-expand
#+BEGIN_SRC emacs-lisp
(setq dabbrev-case-fold-search nil) ; case sensitive expansion
(setq dabbrev-abbrev-char-regexp "\\sw\\|\\s_") ; Complete only symbols
#+END_SRC
*** electric-buffer-list
Buffer selection with less keypresses
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-x\C-b" 'electric-buffer-list)
#+END_SRC
*** ido-mode
interactively do things with buffers and files (replacement for
~find-file~ and ~switch-to-buffer~ with nice shortcuts and fuzzy
(flexible) matching).
#+BEGIN_SRC emacs-lisp
(ido-mode t)
(setq ido-enable-flex-matching t)
(setq ido-use-virtual-buffers t)
#+END_SRC
Open recent files (with the recentf module) using ido
#+BEGIN_SRC emacs-lisp
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 500)
(defun ido-recentf-open ()
  "Use `ido-completing-read' to \\[find-file] a recent file"
  (interactive)
  (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
    (message "Aborting")))
(global-set-key "\C-x\C-r" 'ido-recentf-open)
#+END_SRC
*** org-mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
(setq org-startup-indented nil)
(setq org-ellipsis " ->")
(setq org-adapt-indentation nil)
(setq org-html-postamble nil)
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC
*** visual-regexp
A regexp/replace command for Emacs with interactive visual feedback
and modern regexp syntax.
#+BEGIN_SRC emacs-lisp
(setq vr/engine 'pcre2el)
(require 'visual-regexp-steroids)
(global-set-key (kbd "C-M-r") 'vr/isearch-backward)
(global-set-key (kbd "C-M-s") 'vr/isearch-forward)
(global-set-key (kbd "C-M-%") 'vr/query-replace)
#+END_SRC
*** Scroll by moving cursor
I absolutely detest the default PageUp/PageDown behaviour since it
doesn't return the cursor to the same
position. https://www.emacswiki.org/emacs/Scrolling
#+BEGIN_SRC emacs-lisp
(defun larsch/scroll-up ()
  "Jumps lines up"
  (interactive)
  (setq this-command 'previous-line) ; trick to preserve column
  (previous-line (- (window-text-height) next-screen-context-lines)))
(defun larsch/scroll-down ()
  "Jumps lines down"
  (interactive)
  (setq this-command 'next-line) ; trick to preserve column
  (next-line (- (window-height) next-screen-context-lines)))
(global-set-key "\M-p" 'larsch/scroll-up)
(global-set-key "\M-n" 'larsch/scroll-down)
(global-set-key (kbd "<prior>") 'larsch/scroll-up)
(global-set-key (kbd "<next>") 'larsch/scroll-down)
#+END_SRC
** Programming
*** Insert pairs of things (quotes, braces, etc.)
#+BEGIN_SRC emacs-lisp
(defun insert-double-quotes (&optional arg)
  (interactive "P")
  (insert-pair arg ?\" ?\"))
(defun insert-quotes (&optional arg)
  (interactive "P")
  (insert-pair arg ?\' ?\'))
(defun insert-do-end (&optional arg)
  (interactive "P")
  (insert-pair arg "do\n" "end\n"))
(defun insert-brackets (&optional arg)
  (interactive "P")
  (insert-pair arg ?\[ ?\]))
(global-set-key "\M-\"" 'insert-double-quotes)
(global-set-key "\M-'" 'insert-quotes)
(global-set-key "\M-[" 'insert-brackets)
(set 'parens-require-spaces nil) ; dont insert space before parentheses
#+END_SRC
Insert pairs of braces while taking care of wrapping regions and
indentation
#+BEGIN_SRC emacs-lisp
(defun insert-braces ()
  "Insert matching curly braces or wrap a region with braces"
  (interactive)
  (if (region-active-p) (insert-braces-region) (insert-braces-point)))
(defun insert-braces-point () "Insert matching curly braces at point" (interactive)
  (set-mark-command 'nil)
  (insert "{\n\n}")
  (indent-region (- (line-beginning-position) 3) (line-end-position) nil)
  (previous-line 1)
  (indent-according-to-mode))
(defun insert-braces-region () "Insert matching curly braces around region" (interactive)
  (let ((beginning (region-beginning))
        (end (region-end)))
    (goto-char end)
    (insert "}\n")
    (goto-char beginning)
    (insert "{\n")
    (indent-region (- beginning 2) (+ end 4))
    (indent-according-to-mode)))
(global-set-key "\M-{" 'insert-braces)
#+END_SRC
*** ruby-mode
#+BEGIN_SRC emacs-lisp
(defun install-before-save-hooks-ruby ()
  (interactive)
  (add-hook 'write-contents-functions 'delete-trailing-whitespace))
(set 'ruby-deep-arglist 'nil)
(set 'ruby-deep-indent-paren 'nil)
(set 'ruby-deep-indent-paren-style 'nil)
(setq ruby-insert-encoding-magic-comment nil)
(add-hook 'ruby-mode-hook 'install-before-save-hooks-ruby)
(add-hook 'ruby-mode-hook 'which-function-mode)
(setq ruby-insert-encoding-magic-comment 'nil)
#+END_SRC
*** js2-mode
#+BEGIN_SRC emacs-lisp
(setq js-indent-level 2)
(setq js2-basic-offset 3)
(defun setup-js2-mode () "js2-mode setup" (interactive)
  (set 'indent-tabs-mode nil))
(setq js2-mode-hook 'setup-js2-mode)
#+END_SRC
*** lua-mode
#+BEGIN_SRC emacs-lisp
(set 'lua-indent-offset 2)
(set 'lua-indent-level 2)
#+END_SRC
*** c-mode/c++-mode
Define style
#+BEGIN_SRC emacs-lisp
(c-add-style
 "larsch"
 '("k&r"
   (c-basic-offset . 2)
   (c-offsets-alist . ((inline-open . 0)
                       (statement-case-open . +)
                       (inextern-lang . 0)
                       (innamespace . 0)
                       ))))
(setq c-default-style
  '((java-mode . "java") (other . "larsch")))
#+END_SRC
Setup C/C++ mode
#+BEGIN_SRC emacs-lisp
(defun setup-c++-mode () "Setups Custom C++ mode settings" (interactive)
  (set 'comment-column 35)
  (set 'fill-column 70)
  (set 'indent-tabs-mode nil)
  (set 'parens-require-spaces nil)
  (local-set-key "\C-m" 'newline-and-indent)
  (local-set-key "\M-]" 'ff-find-other-file)
  (c-toggle-hungry-state 1))
(set 'c++-mode-hook 'setup-c++-mode)
(set 'c-mode-hook 'setup-c++-mode)
#+END_SRC
*** Map various files types to modes
#+BEGIN_SRC emacs-lisp
;; yaml-mode
(autoload 'yaml-mode "yaml-mode")
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("jsTestDriver\\.conf$" . yaml-mode))

;; ruby-mode
(autoload 'ruby-mode "ruby-mode")
(add-to-list 'auto-mode-alist '("\\.rbw?$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Cakefile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Gemfile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.rake$" . ruby-mode))

;; text-mode for bison grammars
(add-to-list 'auto-mode-alist '("\\.y$" . text-mode))

;; js2-mode
(autoload 'js2-mode "js2-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.js?$" . js2-mode))

;; json-mode
(autoload 'json-mode "json-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.json$" . json-mode))

;; jade-mode
(add-to-list 'auto-mode-alist '("\\.jade?$" . jade-mode))
(add-to-list 'auto-mode-alist '("\\.pug?$" . jade-mode))

;; lua-mode
(autoload 'lua-mode "lua-mode")
(add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))

;; css-mode
(autoload 'css-mode "css-mode")
(add-to-list 'auto-mode-alist '("\\.css$" . css-mode))
(add-to-list 'auto-mode-alist '("\\.less?$" . css-mode))

;; c++-mode for .h & arduino
(add-to-list 'auto-mode-alist '("\\.h$" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.ino$" . c++-mode))

;; batch-mode
(autoload 'batch-mode "batch-mode")
(add-to-list 'auto-mode-alist '("\\.bat\\'" . batch-mode))
(add-to-list 'auto-mode-alist '("\\.cmd\\'" . batch-mode))

;; haml-mode
(autoload 'haml-mode "haml-mode")
(add-to-list 'auto-mode-alist '("\\.haml$" . haml-mode))

;; cmake-mode
(autoload 'cmake-mode "cmake-mode")
(add-to-list 'auto-mode-alist '("CMakeLists\\.txt\\'" . cmake-mode))
(add-to-list 'auto-mode-alist '("\\.cmake\\'" . cmake-mode))
#+END_SRC
** Custom Operations
*** Easily kill current buffer without asking
#+BEGIN_SRC emacs-lisp
(global-set-key [?\C-.] 'kill-this-buffer)
#+END_SRC
*** Copy symbol with M-w if there is no region
When copying (M-w) and no region is selected, just copy the symbol
(word) under the cursor.
#+BEGIN_SRC emacs-lisp
(defun kill-ring-save-symbol-at-point ()
  "Kill word under cursor"
  (interactive)
  (kill-new (thing-at-point 'symbol)))
(defun kill-ring-save-region-or-word ()
  "Save the region as if killed, but don't kill it. If no region is active, kill the symbol at the cursor."
  (interactive)
  (if (use-region-p)
    (kill-ring-save (point) (mark t))
    (kill-ring-save-symbol-at-point)))
(global-set-key "\M-w" 'kill-ring-save-region-or-word)
#+END_SRC
*** Open new lines more like vi
Based on https://www.emacswiki.org/emacs/OpenNextLine

Behave like vi's o command
#+BEGIN_SRC emacs-lisp
(defun open-next-line (arg)
  "Move to the next line and then opens a line.
    See also `newline-and-indent'."
  (interactive "p")
  (beginning-of-line 2)
  (open-line arg)
  (when newline-and-indent
    (indent-according-to-mode)))
(global-set-key (kbd "C-o") 'open-next-line)
#+END_SRC
Behave like vi's O command
#+BEGIN_SRC emacs-lisp
(defun open-previous-line (arg)
  "Open a new line before the current one.
     See also `newline-and-indent'."
  (interactive "p")
  (beginning-of-line)
  (open-line arg)
  (when newline-and-indent
    (indent-according-to-mode)))
(global-set-key (kbd "M-o") 'open-previous-line)
#+END_SRC
Autoindent ~open-*-lines~
#+BEGIN_SRC emacs-lisp
(defvar newline-and-indent t
   "Modify the behavior of the open-*-line functions to cause them to autoindent.")
#+END_SRC
Duplicate current line
#+BEGIN_SRC emacs-lisp
(defun duplicate-line ()
  "Duplicate current line"
  (interactive)
  (save-excursion
    (kill-ring-save
     (progn (forward-visible-line 0) (point))
     (progn (forward-visible-line 1) (point)))
    )
  (forward-visible-line 1)
  (save-excursion (yank))
  (indent-according-to-mode))
(global-set-key (kbd "M-O") 'duplicate-line)
#+END_SRC
** Utilities
*** Reload configuration
#+BEGIN_SRC emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file "~/.emacs.d/init.el"))
#+END_SRC
